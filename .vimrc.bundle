" plugin_setting_template {{{
" let g:variable = 0
" }}}

" ctrlp{{{
let g:ctrlp_cmd = 'CtrlPMRUFiles'
" The maximum number of files to scan, set to 0 for no limit: >
" let g:ctrlp_max_files = 1000
" Set this to 0 to show the match window at the top of the screen: >
let g:ctrlp_match_window_bottom = 1
" Change the listing order of the files in the match window. The default setting
" (1) is from bottom to top: >
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_max_height = 16
let g:ctrlp_clear_cache_on_exit = 0
" has migemo?
if executable('CMigemo')
  let g:ctrlp_use_migemo = 1
endif
" let g:ctrlp_extensions = ['mixed']
let g:ctrlp_prompt_mappings = {
      \ 'PrtSelectMove("j")':   ['<C-j>', '<tab>', '<down>'],
      \ 'PrtSelectMove("k")':   ['<C-k>', '<s-tab>', '<up>'],
      \ 'ToggleFocus()':        ['<NOP>'],
      \ 'PrtExpandDir()':       ['<NOP>'],
      \ }
" }}}
" airline {{{
  let g:airline_detect_iminsert=1
  let g:airline_detect_whitespace=0 "disabled
" }}}
" indent-guide {{{
let g:indent_guides_enable_on_vim_startup = 1
" let g:indent_guides_guide_size = 1
" let g:indent_guides_color_change_percent = 2
let g:indent_guides_start_level = 2
let g:indent_guides_auto_colors = 0
augroup IndGuCol
  au!
  au VimEnter,colorscheme * highlight def link IndentGuidesOdd Normal
  "solarized base02
  au VimEnter,colorscheme * highlight def link IndentGuidesEven FoldColumn
augroup END
" }}}
" ag.vim {{{
" Don't allow ag.vim to mapping keys in quickfix(if
" rking/ag.vim use).
" let g:ag_apply_qmappings = 0
" let g:ag_apply_lmappings = 0
" }}}
" memolist.vim {{{
" In below sentence, <F5> is ineffective.
" nnoremap m, :exe "CtrlP" g:memolist_path<CR><F5>
" NOTE: To overwrite, define after loading plugins.
" Experimental: It seems working correctly.
" Reference: :exe
augroup vimrc_loading
  autocmd VimEnter * command! MemoList exe "CtrlP" g:memolist_path | CtrlPClearCache
augroup END
nnoremap m, :MemoList<CR>
" }}}
" vim-quickrun {{{
let g:quickrun_config = {}
" let g:quickrun_config._ = {
"       \ 'runner' : 'vimproc',
"       \ 'outputter/buffer/split' : 'botright 10sp',
"       \ 'runmode' : 'async:vimproc'
"       \ }

" TODO: install openbrowser.vim
" let g:quickrun_config.markdown = {
"       \ 'type'      : 'markdown/pandoc',
"       \ 'outputter' : 'browser',
"       \ 'cmdopt'    : '-s'
"       \ }
" }}}

" neobundle settings {{{

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
" Use https protocol over proxy.
let g:neobundle#types#git#default_protocol = 'https'

call neobundle#rc(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" Recommended to install
" After install, turn shell ~/.vim/bundle/vimproc, (n,g)make -f your_machines_makefile
NeoBundle 'Shougo/vimproc'

" My Bundles here:{{{
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'koron/nyancat-vim'
NeoBundle 'tyru/restart.vim'
NeoBundle 'bling/vim-airline'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'chriskempson/base16-vim'
NeoBundle 'w0ng/vim-hybrid'
NeoBundle '0xBADDCAFE/midnight.vim'
NeoBundle 'epmatsw/ag.vim'
NeoBundle 'glidenote/memolist.vim'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'thinca/vim-visualstar'
NeoBundle 'thinca/vim-scouter'
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'netrw.vim'
" }}}

filetype plugin indent on     " Required!
"
" Brief help
" :NeoBundleList          - list configured bundles
" :NeoBundleInstall(!)    - install(update) bundles
" :NeoBundleClean(!)      - confirm(or auto-approve) removal of unused bundles

" Installation check.
NeoBundleCheck

" }}}

" settings require loading plugins
" colorschemes{{{
if has('gui_running')
  " solarized{{{
  " augroup solarizedAddHi
  "   autocmd!
  "   autocmd ColorScheme * highlight SpecialKey guifg=#073642 guibg=NONE
  "   autocmd ColorScheme * highlight NonText guifg=#073642 guibg=NONE
  " augroup END
  " TODO: check the value's effect
  " let g:solarized_termtrans = 1
  " let g:airline_theme='solarized_rev'
  " colorscheme solarized
  " }}}
  let g:airline_theme='ubaryd'
  colorscheme ubaryd
  " FIXME:this setting is temporary.
  hi Todo guibg=#C7B386
else
  let g:airline_theme='light'
  colorscheme midnight
endif
" }}}

" vim: ft=vim:et:sw=2:sts=2:fdm=marker :
